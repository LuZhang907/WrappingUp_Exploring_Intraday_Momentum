rm(list = setdiff(ls(), lsf.str()))
library(dplyr)
library(stringr)
library(caTools)
library(caret)
library(pROC)
library(rsample)
#import the dwt features
features <- read.csv("/Users/luzhang/Documents/GitHub/WrappingUp_Exploring_Intraday_Momentum_2rd_try/Data/AAPL_allSet_dwt_standardize.csv", header = T)
#head(dwt_features)
#dim(dwt_features)
#2622 57
features$X<-NULL
allSet<-data.frame(features)
#exclude NA at the begining of the indicators
idx_NA <- apply(allSet,1,function(x){sum(is.na(x))>0})
allSet <- subset(allSet, !idx_NA)
allSet$Y<-as.factor(allSet$Y)
# define a function which could give a evalutaion matrix for each rolling
rolling_evaluation_matrix <- function(split,threshold){
trainSet <- analysis(rollingset01)
testSet <- assessment(rollingset01)
#primary model
train_Y<-trainSet$Y
base_model<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum,
family = binomial(link="logit"),data=trainSet)
train_probabs<-predict(base_model,trainSet,type="response")
train_preds<-ifelse(train_probabs>1-threshold,1,0) # threshold achieve highest F1 scores on trainset
trainSet$preds<-train_preds #adding predict labels as a new feature
train_meta<-ifelse(train_Y==train_preds,1,0) #define metal labels: if Y==preds 1, else 0
# Creating Secondary Model
trainSet$Y<-NULL
trainSet$meta_label<-train_meta
meta_model<-glm(meta_label~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum,
family = binomial(link="logit"),data=trainSet)
# introducing test set
test_Y<-testSet$Y
# test set on primary model, produce predict y labels
test_probabs<-predict(base_model,testSet,type="response")
test_preds<-ifelse(test_probabs>1-threshold,1,0) # threshold achieve highest F1 scores on trainset
testSet$preds<-test_preds #adding predict labels as a new feature
test_meta<-ifelse(test_Y==test_preds,1,0)
# test set on secondary model
testSet$Y<-NULL
testSet$meta_label<-test_meta
test_probabs<-predict(meta_model,testSet,type="response")
meta_preds<-ifelse(test_probabs>0.5,1,0)
# adjust predict label by meta value
adj_label<-ifelse(meta_preds==1,test_preds,1-test_preds)
cm_meta<-confusionMatrix(factor(adj_label), factor(test_Y))
return(cm_meta)
}
roll_eem_sliding <-
rolling_origin(
data       = allSet,
initial    = 1742,
assess     = 220,
skip = 219,
cumulative = TRUE
)
library(caTools)
install.packages("caTools")
library(caret)
install.packages("caret")
install.packages("caret")
install.packages("pROC")
install.packages("rsample")
rm(list = setdiff(ls(), lsf.str()))
library(dplyr)
rm(list = setdiff(ls(), lsf.str()))
library(dplyr)
library(stringr)
library(caTools)
library(caret)
library(pROC)
library(rsample)
#import the dwt features
features <- read.csv("/Users/luzhang/Documents/GitHub/WrappingUp_Exploring_Intraday_Momentum_2rd_try/Data/AAPL_allSet_dwt_standardize.csv", header = T)
#head(dwt_features)
#dim(dwt_features)
#2622 57
features$X<-NULL
allSet<-data.frame(features)
#exclude NA at the begining of the indicators
idx_NA <- apply(allSet,1,function(x){sum(is.na(x))>0})
allSet <- subset(allSet, !idx_NA)
allSet$Y<-as.factor(allSet$Y)
# define a function which could give a evalutaion matrix for each rolling
rolling_evaluation_matrix <- function(split,threshold){
trainSet <- analysis(rollingset01)
testSet <- assessment(rollingset01)
#primary model
train_Y<-trainSet$Y
base_model<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum,
family = binomial(link="logit"),data=trainSet)
train_probabs<-predict(base_model,trainSet,type="response")
train_preds<-ifelse(train_probabs>1-threshold,1,0) # threshold achieve highest F1 scores on trainset
trainSet$preds<-train_preds #adding predict labels as a new feature
train_meta<-ifelse(train_Y==train_preds,1,0) #define metal labels: if Y==preds 1, else 0
# Creating Secondary Model
trainSet$Y<-NULL
trainSet$meta_label<-train_meta
meta_model<-glm(meta_label~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum,
family = binomial(link="logit"),data=trainSet)
# introducing test set
test_Y<-testSet$Y
# test set on primary model, produce predict y labels
test_probabs<-predict(base_model,testSet,type="response")
test_preds<-ifelse(test_probabs>1-threshold,1,0) # threshold achieve highest F1 scores on trainset
testSet$preds<-test_preds #adding predict labels as a new feature
test_meta<-ifelse(test_Y==test_preds,1,0)
# test set on secondary model
testSet$Y<-NULL
testSet$meta_label<-test_meta
test_probabs<-predict(meta_model,testSet,type="response")
meta_preds<-ifelse(test_probabs>0.5,1,0)
# adjust predict label by meta value
adj_label<-ifelse(meta_preds==1,test_preds,1-test_preds)
cm_meta<-confusionMatrix(factor(adj_label), factor(test_Y))
return(cm_meta)
}
roll_eem_sliding <-
rolling_origin(
data       = allSet,
initial    = 1742,
assess     = 220,
skip = 219,
cumulative = TRUE
)
rollingset01 <- roll_eem_sliding$splits[[1]]
rollingset02 <- roll_eem_sliding$splits[[2]]
rollingset03 <- roll_eem_sliding$splits[[3]]
rollingset04 <- roll_eem_sliding$splits[[4]]
head(rollingset01)
thresholds<-c(0.2867242,0.4939357,0.4930356,0.4601947)
rolling01 <-rolling_evaluation_matrix(rollingset01,thresholds[1])
rolling01
rolling02 <-rolling_evaluation_matrix(rollingset02,thresholds[2])
rolling02
rolling03 <-rolling_evaluation_matrix(rollingset03,thresholds[3])
rolling03
rolling04 <-rolling_evaluation_matrix(rollingset04,thresholds[4])
rolling04
colnames(allSet)
library(tidyverse)
# set work directory
setwd("/Users/luzhang/Desktop/data/AAPL")
# import multiple rds files
aapl <- list.files(pattern = ".rds") %>%
map(readRDS) %>%
bind_rows()
dim(aapl)
# data preparing
aapl$time<-as.POSIXct(aapl$time,taz="EST")
options(digits.secs=3)
Sys.setenv(TZ='EST')
aapl$time<-as.POSIXct(aapl$time,format="%H:%M:%OS", taz="EST")
aapl<- subset(aapl, lubridate::hour(aapl$time)*60
+lubridate::minute(aapl$time) >= 9*60+30)
aapl <- subset(aapl, lubridate::hour(aapl$time)*60
+lubridate::minute(aapl$time) <= 16*60)
head(aapl)
tail(aapl)
length(aapl$time)
library(WaveletComp)
library(remotes)
library(wmtsa)
install.packages("wmtsa")
updateR()
library(astsa)
library(ggplot2)
library(highfrequency)
library(xts)
library(TTR)
library(remotes)
library(wmtsa)
Close<-aapl$close
High<-aapl$high
Low<-aapl$low
Open<-aapl$open
Volume<-aapl$volume
prices<-xts(Close,aapl$time)
day_index<-endpoints(prices, on = "days", k = 1)
day_index
# last min prices for each trading day
lmP<-prices[day_index,]
# average prices from 1 to 360 mins
n<-length(day_index)-1
avg_360<-rep(0,n)
for (i in 1:n){
start<-day_index[i]+1
end<-day_index[i+1]-30
avg_360[i]<-mean(prices[start:end])
}
#create y label
n<-length(lmP)
y_label<-rep(0,n)
for (i in 1:n ){
if(avg_360[i]<lmP[i]){
y_label[i]=1
}else{
y_label[i]=0
}
}
table(y_label)
n<-length(day_index)-1
start<-rep(0,n)
end<-rep(0,n)
for (i in 1:n){
start[i]<-day_index[i]+1
end[i]<-day_index[i+1]-30
}
dwt_ADX<-rep(0,n)
for (i in 1:n){
dwtH<-wavShrink(High[start[i]:end[i]], wavelet="d4",
n.level=1,
shrink.fun="soft", thresh.fun="adaptive")
dwtL<-wavShrink(Low[start[i]:end[i]], wavelet="d4",
n.level=1,
shrink.fun="soft", thresh.fun="adaptive")
dwtC<-wavShrink(Close[start[i]:end[i]], wavelet="d4",
n.level=1,
shrink.fun="soft", thresh.fun="adaptive")
dwt_HLC<-as.matrix(cbind(dwtH,dwtL,dwtC))
std_HLC<-scale(dwt_HLC)
ADX<-ADX(std_HLC,n=30)[,4]
dwt_ADX[i]<-mean(ADX,na.rm = TRUE)
}
#aroon done
dwt_aroon<-rep(0,n)
for (i in 1:n){
dwtH<-wavShrink(High[start[i]:end[i]], wavelet="d4",
n.level=1,
shrink.fun="soft", thresh.fun="adaptive")
dwtL<-wavShrink(Low[start[i]:end[i]], wavelet="d4",
n.level=1,
shrink.fun="soft", thresh.fun="adaptive")
dwt_HL<-as.matrix(cbind(dwtH,dwtL))
std_HL<-scale(dwt_HL)
aroon<-aroon(std_HL,n=30)[,3]# aroon oscillator
dwt_aroon[i]<-mean(aroon,na.rm = TRUE)
}
library(wmtsa)
install.packages("wmtsa")
