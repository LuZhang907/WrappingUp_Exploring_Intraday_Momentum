allSet<-data.frame(features)
head(allSet)
#exclude NA at the begining of the indicators
idx_NA <- apply(allSet,1,function(x){sum(is.na(x))>0})
allSet <- subset(allSet, !idx_NA)
allSet$Y<-as.factor(allSet$Y)
dim(allSet)
# 2622 56
table(allSet$Y)
#0 1
#1318 1304
nx <- nrow(allSet)
trainSet <- allSet[1:floor(nx*2/3),]
testSet <- allSet[(floor(nx*2/3)+1):nx,]
dim(allSet); dim(trainSet); dim(testSet)
table(trainSet$Y)
#0    1
#876 872
table(testSet$Y)
#logist regression
model_lr<-glm(Y~., family = binomial(link="logit"),data=trainSet)
summary(model_lr)# 4 not defined because of singularities probably owing to there exists multicollinearity in here
# remove covariates dwt_BBandsup dwt_DonchianChannelL, dwt_SMAClose, dwt_runSum
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum , family = binomial(link="logit"),data=trainSet)
probabs<-predict(model_lr,testSet,type="response")
preds<-ifelse(probabs>0.5,1,0)
cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
#################  rolling_origin ################
library(rsample)
roll_eem_sliding <-
rolling_origin(
data       = allSet,
initial    = 1742,
assess     = 220,
skip = 219,
cumulative = TRUE
)
rolling_evaluation_matrix <- function(split){
set.seed(1)
analysis_set <- analysis(split)
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum ,
family = binomial(link="logit"),
data=analysis_set)
testSet = assessment(split)
probabs<-predict(model_lr,testSet,type="response")
preds<-ifelse(probabs>0.5,1,0)
cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
return(cm_lr)
}
rollingset01 <- roll_eem_sliding$splits[[1]]
rollingset02 <- roll_eem_sliding$splits[[2]]
rollingset03 <- roll_eem_sliding$splits[[3]]
rollingset04 <- roll_eem_sliding$splits[[4]]
table(assessment(rollingset01)$Y)
rolling01 <-rolling_evaluation_matrix(rollingset01)
rolling02 <-rolling_evaluation_matrix(rollingset02)
rolling03 <-rolling_evaluation_matrix(rollingset03)
rolling04 <-rolling_evaluation_matrix(rollingset04)
rolling01
rolling01$table
rolling_evaluation_matrix <- function(split){
set.seed(1)
analysis_set <- analysis(split)
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum ,
family = binomial(link="logit"),
data=analysis_set)
testSet = assessment(split)
probabs<-predict(model_lr,testSet,type="response")
preds<-ifelse(probabs>0.5,1,0)
#cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
#return(cm_lr)
recall = Metrics::recall(factor(preds),factor(testSet$Y))
precision = Metrics::precision(factor(preds),factor(testSet$Y))
f1 = Metrics::f1(factor(preds),factor(testSet$Y))
accuracy = Metrics::accuracy(factor(preds),factor(testSet$Y))
cm_lr = c("accuracy" = accuracy, "precision" = precision, "recall" = recall, "f1 score" = f1)
return(cm_lr)
}
rollingset01 <- roll_eem_sliding$splits[[1]]
rollingset02 <- roll_eem_sliding$splits[[2]]
rollingset03 <- roll_eem_sliding$splits[[3]]
rollingset04 <- roll_eem_sliding$splits[[4]]
table(assessment(rollingset01)$Y)
rolling01 <-rolling_evaluation_matrix(rollingset01)
rm(list = setdiff(ls(), lsf.str()))
library(fmlr)
library(quantmod)
library(ROCR)
library(caret)
library(Metrics)
features <- read.csv("/Users/luzhang/Documents/GitHub/WrappingUp_Exploring_Intraday_Momentum_2rd_try/Data/AAPL_allSet_dwt_standardize.csv", header = T)
head(features)
dim(features)
#2622 57
features$X<-NULL
allSet<-data.frame(features)
head(allSet)
#exclude NA at the begining of the indicators
idx_NA <- apply(allSet,1,function(x){sum(is.na(x))>0})
allSet <- subset(allSet, !idx_NA)
allSet$Y<-as.factor(allSet$Y)
dim(allSet)
# 2622 56
table(allSet$Y)
#0 1
#1318 1304
nx <- nrow(allSet)
trainSet <- allSet[1:floor(nx*2/3),]
testSet <- allSet[(floor(nx*2/3)+1):nx,]
dim(allSet); dim(trainSet); dim(testSet)
table(trainSet$Y)
#0    1
#876 872
table(testSet$Y)
#logist regression
model_lr<-glm(Y~., family = binomial(link="logit"),data=trainSet)
summary(model_lr)# 4 not defined because of singularities probably owing to there exists multicollinearity in here
# remove covariates dwt_BBandsup dwt_DonchianChannelL, dwt_SMAClose, dwt_runSum
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum , family = binomial(link="logit"),data=trainSet)
probabs<-predict(model_lr,testSet,type="response")
preds<-ifelse(probabs>0.5,1,0)
cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
#################  rolling_origin ################
library(rsample)
roll_eem_sliding <-
rolling_origin(
data       = allSet,
initial    = 1742,
assess     = 220,
skip = 219,
cumulative = TRUE
)
rolling_evaluation_matrix <- function(split){
set.seed(1)
analysis_set <- analysis(split)
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum ,
family = binomial(link="logit"),
data=analysis_set)
testSet = assessment(split)
probabs<-predict(model_lr,testSet,type="response")
preds<-ifelse(probabs>0.5,1,0)
#cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
#return(cm_lr)
recall = Metrics::recall(factor(preds),factor(testSet$Y))
precision = Metrics::precision(factor(preds),factor(testSet$Y))
f1 = Metrics::f1(factor(preds),factor(testSet$Y))
accuracy = Metrics::accuracy(factor(preds),factor(testSet$Y))
cm_lr = c("accuracy" = accuracy, "precision" = precision, "recall" = recall, "f1 score" = f1)
return(cm_lr)
}
rollingset01 <- roll_eem_sliding$splits[[1]]
rollingset02 <- roll_eem_sliding$splits[[2]]
rollingset03 <- roll_eem_sliding$splits[[3]]
rollingset04 <- roll_eem_sliding$splits[[4]]
table(assessment(rollingset01)$Y)
rolling01 <-rolling_evaluation_matrix(rollingset01)
rolling01
rolling_evaluation_matrix <- function(split){
set.seed(1)
analysis_set <- analysis(split)
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum ,
family = binomial(link="logit"),
data=analysis_set)
testSet = assessment(split)
probabs<-predict(model_lr,testSet,type="response")
preds<-ifelse(probabs>0.5,1,0)
cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
return(cm_lr)
recall = Metrics::recall(preds,testSet$Y)
precision = Metrics::precision(preds,testSet$Y)
f1 = Metrics::f1(preds,testSet$Y)
accuracy = Metrics::accuracy(preds,testSet$Y)
ccm = c("accuracy" = accuracy, "precision" = precision, "recall" = recall, "f1 score" = f1)
return(ccm)
}
rollingset01 <- roll_eem_sliding$splits[[1]]
rollingset02 <- roll_eem_sliding$splits[[2]]
rollingset03 <- roll_eem_sliding$splits[[3]]
rollingset04 <- roll_eem_sliding$splits[[4]]
table(assessment(rollingset01)$Y)
rolling01 <-rolling_evaluation_matrix(rollingset01)
rolling01
rolling_evaluation_matrix <- function(split){
set.seed(1)
analysis_set <- analysis(split)
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum ,
family = binomial(link="logit"),
data=analysis_set)
testSet = assessment(split)
probabs<-predict(model_lr,testSet,type="response")
preds<-ifelse(probabs>0.5,1,0)
#cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
#return(cm_lr)
recall = Metrics::recall(preds,testSet$Y)
precision = Metrics::precision(preds,testSet$Y)
f1 = Metrics::f1(preds,testSet$Y)
accuracy = Metrics::accuracy(preds,testSet$Y)
ccm = c("accuracy" = accuracy, "precision" = precision, "recall" = recall, "f1 score" = f1)
return(ccm)
}
rollingset01 <- roll_eem_sliding$splits[[1]]
rolling01 <-rolling_evaluation_matrix(rollingset01)
rolling01
testSet$Y
preds
as.factor(preds)
rolling_evaluation_matrix <- function(split){
set.seed(1)
analysis_set <- analysis(split)
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum ,
family = binomial(link="logit"),
data=analysis_set)
testSet = assessment(split)
probabs<-predict(model_lr,testSet,type="response")
preds<-ifelse(probabs>0.5,1,0)
#cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
#return(cm_lr)
recall = Metrics::recall(as.factor(preds),testSet$Y)
precision = Metrics::precision(as.factor(preds),testSet$Y)
f1 = Metrics::f1(as.factor(preds),testSet$Y)
accuracy = Metrics::accuracy(as.factor(preds),testSet$Y)
ccm = c("accuracy" = accuracy, "precision" = precision, "recall" = recall, "f1 score" = f1)
return(ccm)
}
rollingset01 <- roll_eem_sliding$splits[[1]]
rolling01 <-rolling_evaluation_matrix(rollingset01)
head(preds)
head(test$Y)
head(testSetY)
head(testSet$Y)
class(preds)
preds
typeof(preds)
preds.values
head(as.factor(preds))
head(as.numeric(preds))
head(as.factor(as.numeric(preds)))
rolling_evaluation_matrix <- function(split){
set.seed(1)
analysis_set <- analysis(split)
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum ,
family = binomial(link="logit"),
data=analysis_set)
testSet = assessment(split)
probabs<-predict(model_lr,testSet,type="response")
preds<-ifelse(probabs>0.5,1,0)
preds <- as.numeric(preds) # remove index
#cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
#return(cm_lr)
recall = Metrics::recall(as.factor(aspreds),testSet$Y)
precision = Metrics::precision(as.factor(preds),testSet$Y)
f1 = Metrics::f1(as.factor(preds),testSet$Y)
accuracy = Metrics::accuracy(as.factor(preds),testSet$Y)
ccm = c("accuracy" = accuracy, "precision" = precision, "recall" = recall, "f1 score" = f1)
return(ccm)
}
rollingset01 <- roll_eem_sliding$splits[[1]]
rolling01 <-rolling_evaluation_matrix(rollingset01)
rolling_evaluation_matrix <- function(split){
set.seed(1)
analysis_set <- analysis(split)
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum ,
family = binomial(link="logit"),
data=analysis_set)
testSet = assessment(split)
probabs<-predict(model_lr,testSet,type="response")
preds<-ifelse(probabs>0.5,1,0)
preds <- as.numeric(preds) # remove index
#cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
#return(cm_lr)
recall = Metrics::recall(as.factor(preds),testSet$Y)
precision = Metrics::precision(as.factor(preds),testSet$Y)
f1 = Metrics::f1(as.factor(preds),testSet$Y)
accuracy = Metrics::accuracy(as.factor(preds),testSet$Y)
ccm = c("accuracy" = accuracy, "precision" = precision, "recall" = recall, "f1 score" = f1)
return(ccm)
}
rollingset01 <- roll_eem_sliding$splits[[1]]
rolling01 <-rolling_evaluation_matrix(rollingset01)
rolling01
head(preds)
head(as.numeric(preds))
as.numeric(preds)
rolling_evaluation_matrix <- function(split){
set.seed(1)
analysis_set <- analysis(split)
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum ,
family = binomial(link="logit"),
data=analysis_set)
testSet = assessment(split)
probabs<-predict(model_lr,testSet,type="response")
preds<-ifelse(probabs>0.5,1,0)
preds <- as.numeric(preds) # remove index
#cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
#return(cm_lr)
recall = Metrics::recall(as.factor(preds),testSet$Y)
precision = Metrics::precision(as.factor(preds),testSet$Y)
f1 = Metrics::f1(as.factor(preds),testSet$Y)
accuracy = Metrics::accuracy(as.factor(preds),testSet$Y)
ccm = c("accuracy" = accuracy, "precision" = precision, "recall" = recall, "f1 score" = f1)
return(ccm)
}
rollingset01 <- roll_eem_sliding$splits[[1]]
rolling01 <-rolling_evaluation_matrix(rollingset01)
rm(list = setdiff(ls(), lsf.str()))
library(fmlr)
library(quantmod)
library(ROCR)
library(caret)
library(Metrics)
features <- read.csv("/Users/luzhang/Documents/GitHub/WrappingUp_Exploring_Intraday_Momentum_2rd_try/Data/AAPL_allSet_dwt_standardize.csv", header = T)
head(features)
dim(features)
#2622 57
features$X<-NULL
allSet<-data.frame(features)
head(allSet)
#exclude NA at the begining of the indicators
idx_NA <- apply(allSet,1,function(x){sum(is.na(x))>0})
allSet <- subset(allSet, !idx_NA)
allSet$Y<-as.factor(allSet$Y)
dim(allSet)
# 2622 56
table(allSet$Y)
#0 1
#1318 1304
nx <- nrow(allSet)
trainSet <- allSet[1:floor(nx*2/3),]
testSet <- allSet[(floor(nx*2/3)+1):nx,]
dim(allSet); dim(trainSet); dim(testSet)
table(trainSet$Y)
#0    1
#876 872
table(testSet$Y)
#logist regression
model_lr<-glm(Y~., family = binomial(link="logit"),data=trainSet)
summary(model_lr)# 4 not defined because of singularities probably owing to there exists multicollinearity in here
# remove covariates dwt_BBandsup dwt_DonchianChannelL, dwt_SMAClose, dwt_runSum
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum , family = binomial(link="logit"),data=trainSet)
probabs<-predict(model_lr,testSet,type="response")
preds<-ifelse(probabs>0.5,1,0)
cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
#################  rolling_origin ################
library(rsample)
roll_eem_sliding <-
rolling_origin(
data       = allSet,
initial    = 1742,
assess     = 220,
skip = 219,
cumulative = TRUE
)
rolling_evaluation_matrix <- function(split){
set.seed(1)
analysis_set <- analysis(split)
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum ,
family = binomial(link="logit"),
data=analysis_set)
testSet = assessment(split)
probabs<-predict(model_lr,testSet,type="response")
preds<-ifelse(probabs>0.5,1,0)
preds <- as.numeric(preds) # remove index
#cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
#return(cm_lr)
recall = Metrics::recall(as.factor(preds),testSet$Y)
precision = Metrics::precision(as.factor(preds),testSet$Y)
f1 = Metrics::f1(as.factor(preds),testSet$Y)
accuracy = Metrics::accuracy(as.factor(preds),testSet$Y)
ccm = c("accuracy" = accuracy, "precision" = precision, "recall" = recall, "f1 score" = f1)
return(ccm)
}
rollingset01 <- roll_eem_sliding$splits[[1]]
rollingset02 <- roll_eem_sliding$splits[[2]]
rollingset03 <- roll_eem_sliding$splits[[3]]
rollingset04 <- roll_eem_sliding$splits[[4]]
table(assessment(rollingset01)$Y)
rolling01 <-rolling_evaluation_matrix(rollingset01)
rolling01
rolling_evaluation_matrix <- function(split){
set.seed(1)
analysis_set <- analysis(split)
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum ,
family = binomial(link="logit"),
data=analysis_set)
testSet = assessment(split)
probabs<-predict(model_lr,testSet,type="response")
preds<-ifelse(probabs>0.5,1,0)
preds <- as.numeric(preds) # remove index
#cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
#return(cm_lr)
recall = Metrics::recall(preds,testSet$Y)
precision = Metrics::precision(preds,testSet$Y)
f1 = Metrics::f1(preds,testSet$Y)
accuracy = Metrics::accuracy(apreds,testSet$Y)
ccm = c("accuracy" = accuracy, "precision" = precision, "recall" = recall, "f1 score" = f1)
return(ccm)
}
rollingset01 <- roll_eem_sliding$splits[[1]]
rolling01 <-rolling_evaluation_matrix(rollingset01)
rolling_evaluation_matrix <- function(split){
set.seed(1)
analysis_set <- analysis(split)
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum ,
family = binomial(link="logit"),
data=analysis_set)
testSet = assessment(split)
probabs<-predict(model_lr,testSet,type="response")
preds<-ifelse(probabs>0.5,1,0)
preds <- as.numeric(preds) # remove index
#cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
#return(cm_lr)
recall = Metrics::recall(preds,testSet$Y)
precision = Metrics::precision(preds,testSet$Y)
f1 = Metrics::f1(preds,testSet$Y)
accuracy = Metrics::accuracy(preds,testSet$Y)
ccm = c("accuracy" = accuracy, "precision" = precision, "recall" = recall, "f1 score" = f1)
return(ccm)
}
rollingset01 <- roll_eem_sliding$splits[[1]]
rolling01 <-rolling_evaluation_matrix(rollingset01)
rolling01
head(preds)
preds <- as.numeric(preds)
head(preds)
head(testSet$Y)
Metrics::recall(preds,testSet$Y)
Metrics::recall(preds_n,testSet$Y)
head(preds)
class(preds)
class(testSet$Y)
Metrics::recall(preds_n,as.numeric(testSet$Y))
Metrics::recall(preds,as.numeric(testSet$Y))
Metrics::recall(as.factor(preds),as.factor(as.numeric(testSet$Y)))
rolling_evaluation_matrix <- function(split){
set.seed(1)
analysis_set <- analysis(split)
model_lr<-glm(Y~.-dwt_BBandsup-dwt_DonchianChannelL-dwt_SMAClose-dwt_runSum ,
family = binomial(link="logit"),
data=analysis_set)
testSet = assessment(split)
probabs <- predict(model_lr,testSet,type="response")
preds <- ifelse(probabs>0.5,1,0)
preds <- as.numeric(preds) # remove index
#cm_lr<-confusionMatrix(factor(preds), factor(testSet$Y))
#return(cm_lr)
recall = Metrics::recall(preds,as.numeric(testSet$Y))
precision = Metrics::precision(preds,as.numeric(testSet$Y))
f1 = Metrics::f1(preds,as.numeric(testSet$Y))
accuracy = Metrics::accuracy(preds,as.numeric(testSet$Y))
ccm = c("accuracy" = accuracy, "precision" = precision, "recall" = recall, "f1 score" = f1)
return(ccm)
}
rollingset01 <- roll_eem_sliding$splits[[1]]
rolling01 <-rolling_evaluation_matrix(rollingset01)
rolling01
source("~/Documents/GitHub/WrappingUp_Exploring_Intraday_Momentum_2rd_try/Wavelet Transformation/AAPL_logisticRegression_dwt_standardized_features.R", echo=TRUE)
source("~/Documents/GitHub/WrappingUp_Exploring_Intraday_Momentum_2rd_try/Wavelet Transformation/AAPL_logisticRegression_dwt_standardized_features.R", echo=TRUE)
rolling01
rolling02 <-rolling_evaluation_matrix(rollingset02)
rolling03 <-rolling_evaluation_matrix(rollingset03)
rolling04 <-rolling_evaluation_matrix(rollingset04)
rolling02
rolling 3
rolling03
rolling 4
rolling04
source("~/Documents/GitHub/WrappingUp_Exploring_Intraday_Momentum_2rd_try/Wavelet Transformation/AAPL_logisticRegression_raw_standardized_features.R", echo=TRUE)
source("~/Documents/GitHub/WrappingUp_Exploring_Intraday_Momentum_2rd_try/Wavelet Transformation/AAPL_logisticRegression_raw_standardized_features.R", echo=TRUE)
source("~/Documents/GitHub/WrappingUp_Exploring_Intraday_Momentum_2rd_try/Wavelet Transformation/AAPL_logisticRegression_raw_standardized_features.R", echo=TRUE)
rm(list = setdiff(ls(), lsf.str()))
#library(fmlr)
library(quantmod)
library(TTR) # for various indicators
library(randomForest)
install.packages("randomForest")
library(randomForest)
library(ROCR)
library(caret)
features <- read.csv("/Users/luzhang/Documents/GitHub/WrappingUp_Exploring_Intraday_Momentum_2rd_try/Data/AAPL_allSet_dwt_standardize.csv", header = T)
head(features)
dim(features)
#2662 57
features$X<-NULL
allSet<-data.frame(features)
head(allSet)
#exclude NA at the begining of the indicators
idx_NA <- apply(allSet,1,function(x){sum(is.na(x))>0})
allSet <- subset(allSet, !idx_NA)
allSet$Y<-as.factor(allSet$Y)
dim(allSet)
# 2662 56
table(allSet$Y)
#0 1
#1318 1304
nx <- nrow(allSet)
trainSet <- allSet[1:floor(nx*2/3),]
testSet <- allSet[(floor(nx*2/3)+1):nx,]
dim(allSet); dim(trainSet); dim(testSet)
table(trainSet$Y)
#0   1
#876 872
table(testSet$Y)
#### original  random forest
set.seed(1)
model_rf <- caret::train(Y ~ .,
data = trainSet,
method = "rf",
preProcess = c("scale", "center"),
trControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
verboseIter = FALSE))
